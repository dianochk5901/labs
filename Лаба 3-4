#Задание №1
def field(items, *args):
    assert len(args) > 0, "Необходимо указать хотя бы один ключ"

    if len(args) == 1:
        key = args[0]
        for item in items:
            value = item.get(key)
            if value is not None:
                yield value
    else:
        for item in items:
            result = {key: item[key] for key in args if item.get(key) is not None}
            if result:
                yield result

# Пример использования
if __name__ == "__main__":
    goods = [
        {'title': 'Ковер', 'price': 2000, 'color': 'green'},
        {'title': 'Диван для отдыха', 'color': 'black'}
    ]
    print("Задание №1")
    print(list(field(goods, 'title')))  # Вывод: ['Ковер', 'Диван для отдыха']
    print(list(field(goods, 'title', 'price')))  # Вывод: [{'title': 'Ковер', 'price': 2000}, {'title': 'Диван для отдыха'}]

#Задание №2
import random

def gen_random(num_count, begin, end):
    for _ in range(num_count):
        yield random.randint(begin, end)

# Пример использования
if __name__ == "__main__":
    print("Задание №2")
    print(list(gen_random(5, 1, 3)))  # Пример вывода: [2, 2, 3, 2, 1]

#Задание №3
class Unique:
    def __init__(self, items, **kwargs):
        self.ignore_case = kwargs.get('ignore_case', False)
        self.seen = set()
        self.items = iter(items)

    def __iter__(self):
        return self

    def __next__(self):
        while True:
            item = next(self.items)
            check_item = item.lower() if self.ignore_case and isinstance(item, str) else item
            if check_item not in self.seen:
                self.seen.add(check_item)
                return item

# Пример использования
if __name__ == "__main__":
    data = [1, 1, 1, 2, 2, 3, 'a', 'A', 'b', 'B']
    print("Задание №3")
    print(list(Unique(data)))  # Вывод: [1, 2, 3, 'a', 'A', 'b', 'B']
    print(list(Unique(data, ignore_case=True)))  # Вывод: [1, 2, 3, 'a', 'b']

#Задание №4
print("Задание №4")
data = [4, -30, 100, -100, 123, 1, 0, -1, -4]

if __name__ == '__main__':
    # Без использования lambda-функции
    result = sorted(data, key=abs, reverse=True)
    print(result)

    # С использованием lambda-функции
    result_with_lambda = sorted(data, key=lambda x: abs(x), reverse=True)
    print(result_with_lambda)

